package asd.framework.booking.dao;

import asd.booking.utils.Config;

import java.io.Closeable;
import java.sql.*;
import java.util.Enumeration;

/**
 * @author Enkh Amgalan Erdenebat
 */
public class Database {

    private Connection conn;
    private static Database instance = null;

    private Database() {
    }

    public static Database getInstance() {
        if (instance == null) {
            synchronized (Database.class) {
                if (instance == null) {
                    instance = new Database();
                }
            }
        }
        return instance;
    }

    private void connect() throws ClassNotFoundException, SQLException {
        Class.forName(Config.getString("database"));
        conn = DriverManager.getConnection(
                Config.getString("url"),
                Config.getString("user"),
                Config.getString("password"));
    }

    private void checkConn() throws ClassNotFoundException, SQLException {
        if (conn == null || conn.isClosed()) {
            connect();
        }
    }


    public PreparedStatement preparedStatement(String sql, Object... os) throws SQLException, ClassNotFoundException {
        return preparedStatement(null, sql, os);
    }

    public PreparedStatement preparedStatement(Integer autoGeneratedKeys, String sql, Object... os)
            throws SQLException, ClassNotFoundException {
        String csql = sql;
        for (int i = 0; i < os.length; i++) {
            Object o = os[i];
            csql = csql.replaceFirst("\\?", "##QMR" + i);
        }
        sql = csql.replaceAll("##QMR\\d+", "?");
        checkConn();
        PreparedStatement ps;
        if (autoGeneratedKeys == null) {
            ps = conn.prepareStatement(sql);
        } else {
            ps = conn.prepareStatement(sql, autoGeneratedKeys);
        }
        String tmp = sql;
        int i = 1;
        String replaceKey = "QuestionMarkReplacement";
        tmp = tmp.replaceAll("\\?", replaceKey);
        for (Object o : os) {
            tmp = tmp.replaceFirst(replaceKey, o == null ? "NULL" : '\''
                    + o.toString().replace("$", "\\$") + '\'');
        }
        System.out.println(tmp);
        for (Object o : os) {
            if (o instanceof java.util.Date) {
                ps.setTimestamp(i++, new Timestamp(((java.util.Date) o).getTime()));
            } else {
                ps.setObject(i++, o);
            }
        }
        return ps;
    }

    public CallableStatement callableStatement(String sql, Object... os) throws SQLException,
            ClassNotFoundException {
        String csql = sql;
        for (int i = 0; i < os.length; i++) {
            Object o = os[i];
            csql = csql.replaceFirst("\\?", "##QMR" + i);
        }
        sql = csql.replaceAll("##QMR\\d+", "?");
        checkConn();
        CallableStatement ps = conn.prepareCall(sql);
        String tmp = sql;
        int i = 1;
        String replaceKey = "QuestionMarkReplacement";
        tmp = tmp.replaceAll("\\?", replaceKey);
        for (Object o : os) {
            tmp = tmp.replaceFirst(replaceKey, o == null ? "NULL" : '\''
                    + o.toString().replace("$", "\\$") + '\'');
        }
        System.out.println(tmp);
        for (Object o : os) {
            if (o instanceof java.util.Date) {
                ps.setTimestamp(i++, new Timestamp(((java.util.Date) o).getTime()));
            } else {
                ps.setObject(i++, o);
            }
        }
        return ps;
    }

    public void close(Closeable c) {
        try {
            if (c != null) {
                c.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void close(ResultSet rs) {
        try {
            if (rs != null) {
                rs.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void close(Statement st) {
        try {
            if (st != null) {
                st.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void disconnect() {
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void disconnectWithDriver() {
        try {
            disconnect();
            Enumeration<Driver> drivers = DriverManager.getDrivers();
            Driver driver = null;
            // clear drivers
            while (drivers.hasMoreElements()) {
                try {
                    driver = drivers.nextElement();
                    DriverManager.deregisterDriver(driver);
                } catch (SQLException ex) {
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
